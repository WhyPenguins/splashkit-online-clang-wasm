name: Build Clang/LLD Artefacts

on:
  push:
    tags:
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build Clang & LLD
        working-directory: ./
        run: |
          # based on https://github.com/soedirgo/llvm-wasm
          wget -qO- https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-20/wasi-sysroot-20.0.tar.gz | tar -xz
          wget -qO- https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-20/libclang_rt.builtins-wasm32-wasi-20.0.tar.gz | tar -xz
          mkdir -p wasi-sysroot/lib/clang/16.0.4
          mv lib wasi-sysroot/lib/clang/16.0.4/
          
          git clone --branch llvmorg-16.0.4 --depth 1 https://github.com/llvm/llvm-project

          cd llvm-project/
          cmake -G Ninja -S llvm -B build-host -DCMAKE_BUILD_TYPE=Release
          cmake --build build-host --target llvm-tblgen
          
          echo "set_target_properties(lld PROPERTIES LINK_FLAGS \"-sEXPORT_ALL -sEXPORTED_FUNCTIONS=['__ZN4llvm3sys15CleanupOnSignalEm','_main'] -Os -sNO_INVOKE_RUN -sIMPORTED_MEMORY -sINITIAL_MEMORY=64MB -sEXIT_RUNTIME -sSTACK_SIZE=10MB -sASSERTIONS -sALLOW_MEMORY_GROWTH -sEXPORTED_RUNTIME_METHODS=FS,callMain -sMODULARIZE -sEXPORT_NAME=Lld -sWASM_BIGINT --preload-file=../../wasi-sysroot/lib@/lib\")" >> llvm/CMakeLists.txt
          echo "set_target_properties(clang PROPERTIES LINK_FLAGS \"-sEXPORT_ALL -sEXPORTED_FUNCTIONS=['__ZN4llvm3sys15CleanupOnSignalEm','_main'] -Os -sNO_INVOKE_RUN -sIMPORTED_MEMORY -sINITIAL_MEMORY=64MB -sEXIT_RUNTIME -sSTACK_SIZE=10MB -sASSERTIONS -sALLOW_MEMORY_GROWTH -sEXPORTED_RUNTIME_METHODS=FS,callMain -sMODULARIZE -sEXPORT_NAME=Clang -sWASM_BIGINT\")" >> llvm/CMakeLists.txt

          # Not going to lie, a lot of these flags are just from trial and error to reduce the build size + compile time... I'm unsure which ones are actually needed
          EMCC_DEBUG=2 CXXFLAGS="-Dwait4=__syscall_wait4" emcmake cmake -G Ninja -S llvm -B build_min -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=install -DLLVM_TARGET_ARCH=wasm32-emscripten -DLLVM_DEFAULT_TARGET_TRIPLE=wasm32-wasi -DLLVM_ENABLE_PROJECTS='lld;clang' -DLLVM_HOST_TRIPLE="WASI" -DLLVM_ENABLE_THREADS=OFF -DLLVM_TARGETS_TO_BUILD="WebAssembly" -DCLANG_ENABLE_STATIC_ANALYZER=ON -DCLANG_BUILD_TOOLS=OFF -DCMAKE_C_COMPILER_WORKS=1 -DCMAKE_CXX_COMPILER_WORKS=1 -DLLVM_TABLEGEN=$PWD/build-host/bin/llvm-tblgen
          
          cmake --build build_min --target lld
          cmake --build build_min --target clang

          cd ../

          zip -j ./release.zip llvm-project/build_min/bin/clang.wasm \
                               llvm-project/build_min/bin/clang++.js \
                               llvm-project/build_min/bin/lld.wasm \
                               llvm-project/build_min/bin/lld.data \
                               llvm-project/build_min/bin/wasm-ld.js
        env:
          GITHUB_TOKEN: ''

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Clang & LLD!
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release.zip
          asset_name: sko-clang-lld.zip
          asset_content_type: application/zip
